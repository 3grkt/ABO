@model ProfileIndexModel
@using MvcContrib.UI
@using MvcContrib.Pagination
@using MvcContrib.UI.Grid
@using MvcContrib.UI.Pager
@using ABO.Core
@using ABO.Core.Infrastructure
@using ABO.Web.Helpers
@using ABO.Web.Models.Profiles;

@{
    ViewBag.Title = @T("PageTitle.Profile");
    ViewBag.Breadcrumb = new ABO.Web.Models.Common.PageBreadcrumb(T("PageTitle.Profile"), string.Empty);
}

<form class="form-horizontal" role="form">
    <div class="row">
        <div class="form-group col-md-6">
            @Html.LabelFor(m => m.DistNumber, new { @class = "col-md-6" })
            <div class="col-md-6">
                @Html.TextBoxFor(m => m.DistNumber, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group col-md-6">
            <button type="submit" value="search" class="btn btn-primary"><i class="fa fa-search"></i>@T("Common.Search")</button>
        </div>
    </div>
</form>

<div class="form-horizontal">
    <div class="row">
        <div class="form-group col-md-6">
            @Html.LabelFor(m => m.Distributor.Name, new { @class = "col-md-6" })
            <div class="col-md-6">
                @Html.ReadOnlyTextBoxFor(m => m.Distributor.Name, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group col-md-6">
            @Html.LabelFor(m => m.Distributor.JoinDate, new { @class = "col-md-6" })
            <div class="col-md-6">
                @Html.EditorFor(m => m.Distributor.JoinDate)
            </div>
        </div>
    </div>
    <div class="row">
        <div class="form-group col-md-6">
            @Html.LabelFor(m => m.Distributor.Address, new { @class = "col-md-6" })
            <div class="col-md-6">
                @Html.ReadOnlyTextBoxFor(m => m.Distributor.Address, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group col-md-6">
            @Html.LabelFor(m => m.Distributor.ExpiryDate, new { @class = "col-md-6" })
            <div class="col-md-6">
                @Html.EditorFor(m => m.Distributor.ExpiryDate)
            </div>
        </div>
    </div>
    <div class="row">
        <div class="form-group col-md-6">
            @Html.LabelFor(m => m.Distributor.WarehouseName, new { @class = "col-md-6" })
            <div class="col-md-6">
                @Html.ReadOnlyTextBoxFor(m => m.Distributor.WarehouseName, new { @class = "form-control" })
            </div>
        </div>
    </div>
</div>

@using (Html.BeginForm())
{
    @Html.HiddenFor(m => m.DistNumber)
    <div class="row">
        <div class="col-md-12">
            <h4>@T("Profile.YourUnboxedList")</h4>
            @Html.Grid(Model.ProfileBoxes).Sort(ViewBag.Sort as GridSortOptions).Columns(column =>
        {
            column.For(model => Html.CheckBox("IsSelected-" + model.Id))
                 .Header("<th><input type='checkbox' id='headerCheckbox' /></th>")
                 .Attributes(style => "width: 3%;");
            column.For(model => string.Format("<a href='javascript:downloadProfile({1})'>{0}</a>", Html.GetDateString(model.CreatedDate), model.Id))
                .Named(T("Profile.ProfileBox.CreatedDate"))
                .SortColumnName("CreatedDate")
                .Attributes(style => "width: 10%;")
                .Encode(false);
            column.For(model => model.TypeName)
                .Named(T("Profile.ProfileBox.TypeName"))
                .SortColumnName("ProfileType.Name")
                .Attributes(style => "width: 20%;");
            column.For(model => model.BoxName)
                .Named(T("Profile.ProfileBox.BoxName"))
                .SortColumnName("ProfileBox.Name")
                .Attributes(style => "width: 15%;");
            column.For(model => model.CreatedByUserName)
                .Named(T("Profile.ProfileBox.CreatedByUserName"))
                .SortColumnName("User.UserName")
                .Attributes(style => "width: 12%;");
            column.For(model => model.WarehouseName)
                .Named(T("Profile.ProfileBox.WarehouseName"))
                .SortColumnName("Warehouse.WarehouseName")
                .Attributes(style => "width: 10%;");
            column.For(model => model.Description)
                .Named(T("Profile.ProfileBox.Description"))
                .SortColumnName("Description")
                .Attributes(style => "width: 10%;");
            column.For(model => model.StatusName)
                .Named(T("Profile.ProfileBox.StatusName"))
                .SortColumnName("Status.Name")
                .Attributes(style => "width: 10%;");
        }).Empty(T("Common.Message.NoRecordFound"))

            @Html.GetPager(Model.Pager)
        </div>
    </div>

    <div class="row">
        <div class="col-md-12 text-right">
            @if (Html.HasPermission(UserPermission.ManageDistributorProfile))
            {
                <button type="button" name="updateBox" value="updateBox" class="btn btn-primary" data-toggle="modal" data-target="#modalDialog" 
                data-title="@T("Profile.ChangeProfileBox.Title")" data-containerid="editPanel" data-onShown="updateBox" data-showfooter="false">
                    @T("Profile.ProfileBox.UpdateBox")
                </button>
                <button type="button" name="updateADA" value="updateADA" class="btn btn-primary" data-toggle="modal" data-target="#modalDialog"
                data-title="@T("Profile.ChangeADA.Title")" data-containerid="editPanel" data-onShown="updateADA" data-showfooter="false">
                    @T("Profile.ProfileBox.UpdateADA")
                </button>
                <button type="submit" name="deleteProfiles" value="deleteProfiles" class="btn btn-primary">@T("Profile.ProfileBox.DeleteSelectedFile")</button>
            }
            <button type="submit" name="exportToPdf" value="exportToPdf" class="btn btn-primary">@T("Profile.ProfileBox.ExportAllToPdf")</button>
        </div>
    </div>
    
}

<div id="editPanel"></div>

@using (Html.BeginForm("DownloadProfileFile", "Profile", FormMethod.Post, new { id = "profileDownloadForm" }))
{
    @Html.Hidden("downloadProfileId")
}

@section Scripts{
    <script type="text/javascript">
        var updateBox = function (panel) {
            return loadPanel(panel, '@Url.Action("LoadProfileBoxChange", "Profile")');
        };

        var updateADA = function (panel) {
            return loadPanel(panel, '@Url.Action("LoadADAChange", "Profile")');
        }

        var loadPanel = function (panel, url) {
            var checkedItem = $('[id^=IsSelected]:checked');

            if (checkedItem.length == 0) {
                alert('@T("Profile.SelectProfileRequired").ToJavascriptString()');
                return false;
            }

            if (checkedItem.length > 1) {
                alert('@T("Profile.SelectOneProfileOnly").ToJavascriptString()');
                return false;
            }

            $.post(url, 'profileId=' + checkedItem.attr('name').replace('IsSelected-', ''), function (data) {
                panel.html(data);
                panel.find('form').attr('action', location.href);
            });
        };

        var deleteProfiles = function () {
            var checkedItem = $('.grid :checked');
            if (checkedItem.length == 0) {
                alert('@T("Profile.SelectProfileRequired").ToJavascriptString()');
                return false;
            }
            return confirm('@T("Profile.ConfirmDeleteProfiles").ToJavascriptString()');
        };

        var downloadProfile = function (id) {
            $('#downloadProfileId').val(id);
            $('#profileDownloadForm').submit();
        }

        $(document).ready(function () {
            aboUtils.setGridCheckBox('headerCheckbox','IsSelected-');

            $('[name=deleteProfiles]').click(function () {
                return deleteProfiles();
            });
        });
    </script>
}